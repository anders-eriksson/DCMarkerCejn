<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArticleNumber" xml:space="preserve">
    <value>Article Number</value>
  </data>
  <data name="Article_not_defined_in_database_Article0" xml:space="preserve">
    <value>Article not defined in database! Article={0}</value>
  </data>
  <data name="BatchSize" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Error_loading_layout_0" xml:space="preserve">
    <value>Error loading layout: {0}</value>
  </data>
  <data name="Fixture" xml:space="preserve">
    <value>Fixture</value>
  </data>
  <data name="Kant" xml:space="preserve">
    <value>Edges</value>
  </data>
  <data name="Layout_not_defined_for_this_article_Article0" xml:space="preserve">
    <value>Layout not defined for this article! Article={0}</value>
  </data>
  <data name="Marking_is_done" xml:space="preserve">
    <value>Marking is done!</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>DCMarker</value>
  </data>
  <data name="ToNumber" xml:space="preserve">
    <value>TO number</value>
  </data>
  <data name="Update_didnt_work_on_this_article_and_layout_Article0_Layout1" xml:space="preserve">
    <value>Update didn't work on this article and layout! Article={0}, Layout={1}</value>
  </data>
  <data name="Waiting_for_start_signal_0" xml:space="preserve">
    <value>Waiting for start signal ({0})</value>
  </data>
  <data name="Waiting_for_start_signal_0xlp" xml:space="preserve">
    <value>Waiting for start signal ({0}.xlp)</value>
  </data>
  <data name="xlp" xml:space="preserve">
    <value>.xlp</value>
  </data>
  <data name="Type_of_machine_not_available_Type0" xml:space="preserve">
    <value>Type of machine not available! Type={0}</value>
  </data>
  <data name="Article_0_received" xml:space="preserve">
    <value>Article {0} received</value>
  </data>
  <data name="ItemInPlace_received_before_Article_Number_is_set" xml:space="preserve">
    <value>ItemInPlace signal received before Article Number is set</value>
  </data>
  <data name="AboutMenuHeader" xml:space="preserve">
    <value>_About</value>
  </data>
  <data name="ExitMenuHeader" xml:space="preserve">
    <value>_Exit</value>
  </data>
  <data name="FileMenuHeader" xml:space="preserve">
    <value>_File</value>
  </data>
  <data name="HelpMenuHeader" xml:space="preserve">
    <value>_Help</value>
  </data>
  <data name="OnTopMenuHeader" xml:space="preserve">
    <value>On Top</value>
  </data>
  <data name="ResetIOMenuHeader" xml:space="preserve">
    <value>_Reset IO</value>
  </data>
  <data name="ToolsMenuHeader" xml:space="preserve">
    <value>_Tools</value>
  </data>
  <data name="WindowMenuHeader" xml:space="preserve">
    <value>_Windows</value>
  </data>
  <data name="Error_Property_Name_0__Error_Message_1" xml:space="preserve">
    <value>Error Property Name {0} : Error Message: {1}</value>
  </data>
  <data name="AddHistroyDataToDB_Exception" xml:space="preserve">
    <value>AddHistroyDataToDB Exception</value>
  </data>
  <data name="CreateSerialNumber_Exception" xml:space="preserve">
    <value>CreateSerialNumber Exception</value>
  </data>
  <data name="Loaded" xml:space="preserve">
    <value>Loaded</value>
  </data>
  <data name="BatchDone" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="Article_does_not_exist_in_database" xml:space="preserve">
    <value>Article does not exist in database!</value>
  </data>
  <data name="TestItem" xml:space="preserve">
    <value>Test Item</value>
  </data>
  <data name="Edge_marking_is_not_supported_in_this_version" xml:space="preserve">
    <value>Edge marking is not supported in this version!</value>
  </data>
  <data name="Waiting_for_product" xml:space="preserve">
    <value>Waiting for product</value>
  </data>
  <data name="Error_initializing_machine" xml:space="preserve">
    <value>Error initializing machine</value>
  </data>
  <data name="Article_not_defined_in_database_0" xml:space="preserve">
    <value>Article not defined in database {0}</value>
  </data>
  <data name="Not_a_valid_number" xml:space="preserve">
    <value>Not a valid number</value>
  </data>
  <data name="Quantity_must_be_1_or_larger" xml:space="preserve">
    <value>Quantity must be 1 or larger</value>
  </data>
  <data name="ResetZAxisMenuHeader" xml:space="preserve">
    <value>Reset Z Axis</value>
  </data>
  <data name="Article_Number_0_not_found_in_database" xml:space="preserve">
    <value>Article Number: {0} not found in database!</value>
  </data>
  <data name="Both_Article_number_and_quantity_must_be_entered" xml:space="preserve">
    <value>Both Article number and quantity must be entered</value>
  </data>
  <data name="TO_Number_must_be_0_characters" xml:space="preserve">
    <value>TO Number must be {0} characters</value>
  </data>
  <data name="No_Connection_with_Z_axis" xml:space="preserve">
    <value>No Connection with Z axis!</value>
  </data>
  <data name="ERROR" xml:space="preserve">
    <value>ERROR</value>
  </data>
  <data name="OrderBatch_is_done" xml:space="preserve">
    <value>Order/Batch is done!</value>
  </data>
  <data name="Order_is_done" xml:space="preserve">
    <value>Order is done!</value>
  </data>
  <data name="HistoryData_Not_Created" xml:space="preserve">
    <value>History Data not Created! Article={0}, Layout={1}</value>
  </data>
  <data name="LogfileMenuHeader" xml:space="preserve">
    <value>Open Logfile Directory</value>
  </data>
  <data name="Provbit" xml:space="preserve">
    <value>Test item</value>
  </data>
  <data name="Error_Creating_MainWindow_Aborting" xml:space="preserve">
    <value>Error Creating MainWindow. Aborting!</value>
  </data>
  <data name="TotalKant" xml:space="preserve">
    <value>of</value>
  </data>
  <data name="Waiting_for_TOnumber" xml:space="preserve">
    <value>Waiting for Production number</value>
  </data>
  <data name="Production_needs_a_value" xml:space="preserve">
    <value>Production needs a value</value>
  </data>
  <data name="Cant_start_timer_for_polling_ADAM_Module" xml:space="preserve">
    <value>Can't start timer for polling ADAM Module</value>
  </data>
  <data name="Initializing_" xml:space="preserve">
    <value>Initializing ...</value>
  </data>
  <data name="You_must_enter_Production_number_BEFORE_giving_start_signal_to_the_machine" xml:space="preserve">
    <value>You must enter Production number BEFORE giving start signal to the machine!</value>
  </data>
  <data name="Production" xml:space="preserve">
    <value>Production</value>
  </data>
  <data name="Production_must_be_0_characters" xml:space="preserve">
    <value>Production must be {0} characters</value>
  </data>
</root>